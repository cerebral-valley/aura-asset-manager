import apiClient from '@/lib/api'

export const transactionsService = {
  async getTransactions(config = {}) {
    const response = await apiClient.get('/transactions/', config)
    return response.data
  },

  async getTransaction(id, config = {}) {
    const response = await apiClient.get(`/transactions/${id}/`, config)
    return response.data
  },

  async getAssetTransactions(assetId, config = {}) {
    const response = await apiClient.get(`/transactions/asset/${assetId}/`, config)
    return response.data
  },

  async createTransaction(transaction, config = {}) {
    console.log('🔧 TRANSACTIONS_SERVICE_CREATE_START: Creating transaction', {
      transaction,
      fieldsCount: Object.keys(transaction).length,
      transactionType: transaction.transaction_type,
      code: 'SERVICE_001'
    })
    
    try {
      // Different validation based on transaction type
      if (transaction.transaction_type === 'create') {
        // For create transactions - validate asset creation fields
        if (!transaction.asset_name?.trim()) {
          throw new Error('SERVICE_ERROR_001: asset_name is required for create transactions')
        }
        if (!transaction.asset_type?.trim()) {
          throw new Error('SERVICE_ERROR_002: asset_type is required for create transactions')
        }
        if (!transaction.transaction_date) {
          throw new Error('SERVICE_ERROR_003: transaction_date is required')
        }
        
        console.log('📡 CREATE_TRANSACTION_API_CALL: Using dedicated create endpoint', {
          url: '/transaction_create/',  // ✅ Matches router prefix + route path
          method: 'POST',
          assetData: {
            asset_name: transaction.asset_name,
            asset_type: transaction.asset_type,
            acquisition_value: transaction.acquisition_value,
            current_value: transaction.current_value
          },
          code: 'SERVICE_002A'
        })
        
        // 🎯 CLEAN TRANSACTION DATA - Remove asset_id for create transactions
        const createTransactionData = { ...transaction }
        delete createTransactionData.asset_id  // Remove asset_id - will be generated by backend
        
        console.log('🧹 CREATE_TRANSACTION_CLEANED: Removed asset_id from request', {
          originalFields: Object.keys(transaction),
          cleanedFields: Object.keys(createTransactionData),
          removedAssetId: !createTransactionData.hasOwnProperty('asset_id'),
          code: 'SERVICE_002B'
        })
        
        // 🎯 USE DEDICATED CREATE ENDPOINT - matches backend router exactly
        const response = await apiClient.post('/transaction_create/', createTransactionData, config)
        
        console.log('✅ CREATE_TRANSACTION_SUCCESS: Asset created via transaction', {
          transactionId: response.data.id,
          assetId: response.data.asset_id,
          assetName: response.data.asset_name,
          code: 'SERVICE_003A'
        })
        
        return response.data
        
      } else {
        // For update/other transactions - validate asset_id
        if (!transaction.asset_id) {
          throw new Error('SERVICE_ERROR_004: asset_id is required for update transactions')
        }
        if (!transaction.transaction_type) {
          throw new Error('SERVICE_ERROR_005: transaction_type is required')
        }
        
        console.log('📡 UPDATE_TRANSACTION_API_CALL: Using regular transactions endpoint', {
          url: '/transactions/',
          method: 'POST',
          assetId: transaction.asset_id,
          transactionType: transaction.transaction_type,
          code: 'SERVICE_002B'
        })
        
        // Use regular transactions endpoint for updates
        const response = await apiClient.post('/transactions/', transaction, config)
        
        console.log('✅ UPDATE_TRANSACTION_SUCCESS: Transaction updated', {
          transactionId: response.data.id,
          transactionType: response.data.transaction_type,
          code: 'SERVICE_003B'
        })
        
        return response.data
      }
      
    } catch (error) {
      console.error('❌ TRANSACTIONS_SERVICE_ERROR: Failed to create transaction', {
        error: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data,
        requestData: transaction,
        transactionType: transaction.transaction_type,
        code: 'SERVICE_ERROR'
      })
      
      // Re-throw with more context
      if (error.response?.status === 422) {
        throw new Error(`VALIDATION_ERROR: ${JSON.stringify(error.response.data.detail)}`)
      } else if (error.response?.status === 401) {
        throw new Error('AUTHENTICATION_ERROR: Please log in again')
      } else if (error.response?.status === 403) {
        throw new Error('AUTHORIZATION_ERROR: Insufficient permissions')
      } else if (error.response?.status >= 500) {
        throw new Error('SERVER_ERROR: Internal server error')
      } else {
        throw error
      }
    }
  },

  async updateTransaction(id, transaction, config = {}) {
    const response = await apiClient.put(`/transactions/${id}/`, transaction, config)
    return response.data
  },

  async deleteTransaction(id, config = {}) {
    const response = await apiClient.delete(`/transactions/${id}/`, config)
    return response.data
  }
}